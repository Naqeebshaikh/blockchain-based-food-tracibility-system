let's set up the basic requirements:


Let's install Visual Studio Code first:

Go to https://code.visualstudio.com/
Download the version for your operating system (Windows/Mac/Linux)
Install it with default settings

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

next step - installing Node.js:

Install Node.js:

Go to https://nodejs.org/
Download the "LTS" (Long Term Support) version
Install it with default settings


After installation, verify Node.js is installed correctly:

Open VS Code
Click on Terminal in the top menu
Click "New Terminal"
In the terminal, type these commands:

node --version
npm --version

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

next step - installing Truffle and Ganache for blockchain development:

First, install Truffle globally through npm. In VS Code terminal, run:

npm install -g truffle


second, Download and install Ganache:

Go to https://trufflesuite.com/ganache/
Download the version for your operating system
Install it with default settings



After running the truffle install command, verify it's installed by typing:

truffle version

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Install Git:

Go to https://git-scm.com/download/win
Click on "Click here to download" under "64-bit Git for Windows Setup"
Run the downloaded installer

[close your current VS Code terminal and open a new one]

git --version

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

let's clone the example repository. 


navigate to where you want to create the project:

cd D:\Project  ( your own created folder )

Clone the repository:

git clone https://github.com/lakshya-20/supply-chain.git
cd supply-chain

Once cloned, install the project dependencies:

npm install

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ganache installed, we'll need to:

Compile the smart contracts
Set up a test blockchain using Ganache
Deploy the contracts

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ganache is installed:

1) In Ganache, click "QUICKSTART ETHEREUM" - this will create a local blockchain with test accounts

need to install Truffle globally:

npm install -g truffle

verify truffle installation:

truffle version

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Once Ganache is running (it will show you a list of 10 test accounts with fake ETH balances)

At the top, you should see "RPC SERVER" information and netwrok ID: 5777.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

approach using Remix IDE, which is a web-based interface for deploying and testing Ethereum smart contracts:

click on the "File explorer"

In the contracts folder, create a new file:


SupplyChain.sol:

pragma solidity ^0.5.16;

contract SupplyChain {
    // Product structure
    struct Product {
        uint id;
        string name;
        string origin;
        uint timestamp;
        address producer;
        Status status;
        string qrCode;  // Added QR code field
    }
    
    // Product status
    enum Status { Produced, InTransit, Delivered }
    
    // Role mappings
    mapping(address => string) public userRoles;  // Maps user address to role
    mapping(address => bool) public authorizedUsers; // Track authorized users
    
    // Product mapping
    mapping(uint => Product) public products;
    uint public productCount;
    
    // Contract owner
    address public owner;
    
    constructor() public {
        owner = msg.sender;
    }
    
    // Modifiers for role-based access control
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this");
        _;
    }
    
    modifier onlyProducer() {
        require(keccak256(bytes(userRoles[msg.sender])) == keccak256(bytes("producer")), "Only producer can call this");
        _;
    }
    
    modifier onlyShipper() {
        require(keccak256(bytes(userRoles[msg.sender])) == keccak256(bytes("shipper")), "Only shipper can call this");
        _;
    }
    
    modifier onlyDeliverer() {
        require(keccak256(bytes(userRoles[msg.sender])) == keccak256(bytes("deliverer")), "Only deliverer can call this");
        _;
    }
    
    modifier onlyAuthorized() {
        require(authorizedUsers[msg.sender], "User not authorized");
        _;
    }
    
    // Events
    event ProductCreated(uint id, string name, string origin, address producer, string qrCode);
    event ProductInTransit(uint id);
    event ProductDelivered(uint id);
    event RoleAssigned(address user, string role);
    
    // Role management functions
    function assignRole(address _user, string memory _role) public onlyOwner {
        userRoles[_user] = _role;
        authorizedUsers[_user] = true;
        emit RoleAssigned(_user, _role);
    }
    
    function revokeAccess(address _user) public onlyOwner {
        delete userRoles[_user];
        authorizedUsers[_user] = false;
    }
    
    // Create a new product - only producer can call
    function createProduct(string memory _name, string memory _origin, string memory _qrCode) public onlyProducer {
        productCount++;
        products[productCount] = Product(
            productCount,
            _name,
            _origin,
            block.timestamp,
            msg.sender,
            Status.Produced,
            _qrCode
        );
        emit ProductCreated(productCount, _name, _origin, msg.sender, _qrCode);
    }
    
    // Update product status to InTransit - only shipper can call
    function shipProduct(uint _id) public onlyShipper {
        require(_id > 0 && _id <= productCount, "Invalid product ID");
        Product storage product = products[_id];
        require(product.status == Status.Produced, "Product must be in Produced state");
        
        product.status = Status.InTransit;
        emit ProductInTransit(_id);
    }
    
    // Update product status to Delivered - only deliverer can call
    function deliverProduct(uint _id) public onlyDeliverer {
        require(_id > 0 && _id <= productCount, "Invalid product ID");
        Product storage product = products[_id];
        require(product.status == Status.InTransit, "Product must be in InTransit state");
        
        product.status = Status.Delivered;
        emit ProductDelivered(_id);
    }
    
    // Verify if a product exists and matches the QR code
    function verifyProduct(uint _id, string memory _qrCode) public view returns (bool) {
        require(_id > 0 && _id <= productCount, "Invalid product ID");
        Product storage product = products[_id];
        return keccak256(bytes(product.qrCode)) == keccak256(bytes(_qrCode));
    }
    
    // Get product details
    function getProduct(uint _id) public view returns (
        uint id,
        string memory name,
        string memory origin,
        uint timestamp,
        address producer,
        Status status,
        string memory qrCode
    ) {
        require(_id > 0 && _id <= productCount, "Invalid product ID");
        Product storage product = products[_id];
        return (
            product.id,
            product.name,
            product.origin,
            product.timestamp,
            product.producer,
            product.status,
            product.qrCode
        );
    }
}


Make sure the compiler version is set to 0.5.16

click the "Solidity Compiler"

in ENVIRONMENT, select DEV - Ganache provider.

click on the "Deploy & Run Transactions"

This will connect to your Ganache network. For this you'll need:

Install MetaMask if you haven't (browser extension)
Configure MetaMask to connect to Ganache




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Install MetaMask:

Go to metamask.io
Click "Download"
Add it to your browser

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Once installed, set up MetaMask with Ganache:

Click the MetaMask extension icon
Create a new wallet or import existing
Click the network dropdown (probably says "Ethereum Mainnet")
Click "Add Network" > "Add Network Manually"

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Its bit confusing here, because in ganache we had certain details but whatever metamask suggesting try with it:

For my network, try using your details:

Network Name : Localhost 8545 (as suggested)

RPC URL : http://localhost:7545 (make sure its in this formate)

Chain ID: 1337 (as suggested)

Currency Symbol: ETH

Block Explorer URL: (leave empty)

add these details in metamask.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

After network has been successfully added:

we need to import a Ganache account into MetaMask:

First, open your Ganache application and look at the list of accounts
Click the key icon next to the first account
Copy the "Private Key" (it should be a long hexadecimal string)



Then in MetaMask:

Click the account circle icon at the top right
Click "Import Account"
Select "Private Key" as the import type
Paste the private key you copied from Ganache
Click "Import"

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

connect to the Localhost 8545 network:

Click where it says "Ethereum Mainnet" at the top
Select "Localhost 8545" from the list

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Then go back to Remix IDE:

Click the "Deploy & Run Transactions"
In the "ENVIRONMENT" dropdown, select DEV - Ganache provider.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A POP UP ARISE:

"install Ganache using yarn"

So in VS code,

npm install -g yarn

yarn global add ganache

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

In Remix, 

In that POP UP,

In the dialog box -> change to -> http://127.0.0.1:7545.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

NOW CONNECTION DONE

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Now we need to create PYTHON FLASK and HTML CSS files:

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

app.py:

from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify
from web3 import Web3
import json
import qrcode
from io import BytesIO
import base64
import os
from functools import wraps

app = Flask(__name__)
app.secret_key = '7340d01377d428f7b9a5608a3a8b46d3'

# Web3 setup
w3 = Web3(Web3.HTTPProvider('http://127.0.0.1:7545'))
CONTRACT_ADDRESS = '0x7F083D7Ab6A3aC223D5F6F880348A06EF5e17ADF'

# Load contract ABI
with open('contract_abi.json', 'r') as f:
   contract_abi = json.load(f)

contract = w3.eth.contract(address=CONTRACT_ADDRESS, abi=contract_abi)

# User credentials (Move to database in production)
USERS = {
   'producer1': {'password': 'prod123', 'role': 'producer', 'address': '0x5b4F8d1B720737C143058fd519450e67Cb0736EC'},
   'shipper1': {'password': 'ship123', 'role': 'shipper', 'address': '0x5b4F8d1B720737C143058fd519450e67Cb0736EC'},
   'deliverer1': {'password': 'del123', 'role': 'deliverer', 'address': '0x5b4F8d1B720737C143058fd519450e67Cb0736EC'}
}

@app.before_request
def authorize_users():
   if 'user' in session:
       try:
           owner = contract.functions.owner().call()
           if not contract.functions.authorizedUsers(session['address']).call():
               tx = contract.functions.assignRole(
                   session['address'],
                   session['role']
               ).transact({'from': owner})
       except Exception as e:
           pass

def login_required(f):
   @wraps(f)
   def decorated_function(*args, **kwargs):
       if 'user' not in session:
           return redirect(url_for('login'))
       return f(*args, **kwargs)
   return decorated_function

@app.route('/')
def index():
   return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
   if request.method == 'POST':
       username = request.form['username']
       password = request.form['password']
       
       if username in USERS and USERS[username]['password'] == password:
           session['user'] = username
           session['role'] = USERS[username]['role']
           session['address'] = USERS[username]['address']
           
           if USERS[username]['role'] == 'producer':
               return redirect(url_for('producer_dashboard'))
           elif USERS[username]['role'] == 'shipper':
               return redirect(url_for('shipper_dashboard'))
           else:
               return redirect(url_for('deliverer_dashboard'))
       
       flash('Invalid credentials')
   return render_template('login.html')

@app.route('/producer/dashboard')
@login_required
def producer_dashboard():
    if session['role'] != 'producer':
        return redirect(url_for('login'))
    
    # Authorize producer if not already authorized
    try:
        if not contract.functions.authorizedUsers(session['address']).call():
            owner = contract.functions.owner().call()
            tx = contract.functions.assignRole(
                session['address'],
                'producer'
            ).transact({'from': owner})
    except Exception as e:
        flash('Authorization error')
    
    return render_template('producer_dashboard.html')

@app.route('/create_product', methods=['POST'])
@login_required
def create_product():
   if session['role'] != 'producer':
       return jsonify({'error': 'Unauthorized'}), 403
       
   name = request.form['name']
   origin = request.form['origin']
   qr_code = f"product_{name}_{origin}_{w3.eth.get_block('latest').number}"
   
   try:
       tx_hash = contract.functions.createProduct(
           name,
           origin,
           qr_code
       ).transact({'from': session['address']})
       
       # Generate QR code
       qr = qrcode.QRCode(version=1, box_size=10, border=5)
       qr.add_data(qr_code)
       qr.make(fit=True)
       img = qr.make_image(fill_color="black", back_color="white")
       
       # Convert to base64 for display
       buffered = BytesIO()
       img.save(buffered, format="PNG")
       qr_image = base64.b64encode(buffered.getvalue()).decode()
       
       return jsonify({
           'success': True,
           'qr_code': qr_image,
           'message': 'Product created successfully'
       })
       
   except Exception as e:
       return jsonify({'error': str(e)}), 500

@app.route('/shipper/dashboard')
@login_required
def shipper_dashboard():
   if session['role'] != 'shipper':
       return redirect(url_for('login'))
       
   # Get list of available products
   product_count = contract.functions.productCount().call()
   products = []
   for i in range(1, product_count + 1):
       product = contract.functions.getProduct(i).call()
       if product[5] == 0:  # Status.Produced
           products.append({
               'id': product[0],
               'name': product[1],
               'origin': product[2]
           })
   
   return render_template('shipper_dashboard.html', products=products)

@app.route('/ship_product/<int:product_id>', methods=['POST'])
@login_required
def ship_product(product_id):
   if session['role'] != 'shipper':
       return jsonify({'error': 'Unauthorized'}), 403
   
   try:
       tx_hash = contract.functions.shipProduct(product_id).transact({'from': session['address']})
       return jsonify({'success': True})
   except Exception as e:
       return jsonify({'error': str(e)}), 500

@app.route('/deliverer/dashboard')
@login_required
def deliverer_dashboard():
   if session['role'] != 'deliverer':
       return redirect(url_for('login'))
   # Get list of products in transit
   product_count = contract.functions.productCount().call()
   products = []
   for i in range(1, product_count + 1):
       product = contract.functions.getProduct(i).call()
       if product[5] == 1:  # Status.InTransit
           products.append({
               'id': product[0],
               'name': product[1],
               'origin': product[2]
           })
   return render_template('deliverer_dashboard.html', products=products)

@app.route('/deliver_product/<int:product_id>', methods=['POST'])
@login_required
def deliver_product(product_id):
   if session['role'] != 'deliverer':
       return jsonify({'error': 'Unauthorized'}), 403
   
   try:
       tx_hash = contract.functions.deliverProduct(product_id).transact({'from': session['address']})
       return jsonify({'success': True})
   except Exception as e:
       return jsonify({'error': str(e)}), 500

@app.route('/scan')
def scan_qr():
   return render_template('scan_qr.html')

@app.route('/verify_product/<qr_code>')
def verify_product_details(qr_code):
    try:
        # Extract product ID from QR code format "product_name_origin_blocknumber"
        parts = qr_code.split('_')
        if len(parts) >= 4:  # Ensure we have all parts
            product_id = 1  # Since your system starts with ID 1
            
            # Get product details
            product = contract.functions.getProduct(product_id).call()
            
            # Format response
            product_data = {
                'success': True,
                'product': {
                    'id': product[0],
                    'name': product[1],
                    'origin': product[2],
                    'timestamp': product[3],
                    'producer': product[4],
                    'status': product[5],
                    'qrCode': product[6]
                }
            }
            return jsonify(product_data)
    except Exception as e:
        return jsonify({
            'success': False, 
            'error': f"Could not verify product: {str(e)}"
        }), 400

@app.route('/logout')
def logout():
   session.clear()
   return redirect(url_for('login'))

if __name__ == '__main__':
   app.run(debug=True, port=5000)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a JSON folder called "contract_abi.json"

paste the ABI in this file and save.

To get ABI, 

GO TO REMIX -> CLICK SOLIDITY COMPILER -> CLICK COMPLILATION DETAILS -> COPY ABI 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


login.html:


<!-- templates/login.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Food Traceability System</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .bg-pattern {
            background-color: #ffffff;
            background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.08'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        }
    </style>
</head>
<body class="bg-pattern min-h-screen">
    <div class="flex items-center justify-center min-h-screen">
        <div class="bg-white rounded-lg shadow-2xl w-full max-w-md p-8 transform transition-all hover:scale-105">
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-gray-800 mb-2">Food Traceability</h1>
                <p class="text-gray-600">Blockchain-Powered Supply Chain</p>
            </div>

            {% with messages = get_flashed_messages() %}
                {% if messages %}
                    {% for message in messages %}
                        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
                            <p>{{ message }}</p>
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}

            <form method="POST" action="{{ url_for('login') }}" class="space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2" for="username">
                        Username
                    </label>
                    <input class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                           id="username" name="username" type="text" required>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2" for="password">
                        Password
                    </label>
                    <input class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                           id="password" name="password" type="password" required>
                </div>

                <button type="submit" 
                        class="w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white py-2 px-4 rounded-md hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transform transition-all hover:scale-105">
                    Sign In
                </button>
            </form>
            
            <div class="mt-6 text-center text-sm text-gray-600">
                Access based on assigned role: Producer, Shipper, or Deliverer
            </div>
        </div>
    </div>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

producer_dashboard.html:


<!-- templates/producer_dashboard.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Producer Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
    <!-- Navigation -->
    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <span class="text-xl font-semibold text-gray-800">Producer Dashboard</span>
                </div>
                <div class="flex items-center space-x-4">
                    <a href="{{ url_for('scan_qr') }}" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md transition duration-300">
                        Scan QR
                    </a>
                    <a href="{{ url_for('logout') }}" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md transition duration-300">
                        Logout
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 py-8">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-6">Create New Product</h2>
            
            <form id="productForm" class="space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Product Name
                    </label>
                    <input type="text" name="name" 
                           class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                           required>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Origin
                    </label>
                    <input type="text" name="origin" 
                           class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                           required>
                </div>
                
                <button type="submit" 
                        class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-md transition duration-300 transform hover:scale-105">
                    Create Product
                </button>
            </form>

            <div id="qrCodeDisplay" class="hidden mt-8">
                <h3 class="text-xl font-bold text-gray-800 mb-4">Product QR Code</h3>
                <div class="flex flex-col items-center space-y-4">
                    <img id="qrCode" src="" alt="Product QR Code" class="border p-4 rounded-lg shadow-md">
                    <p class="text-gray-600">Scan this QR code to verify product details</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('productForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            
            try {
                const response = await fetch('/create_product', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('qrCode').src = `data:image/png;base64,${data.qr_code}`;
                    document.getElementById('qrCodeDisplay').classList.remove('hidden');
                    e.target.reset();
                } else {
                    alert(data.error || 'Error creating product');
                }
            } catch (error) {
                alert('Error creating product');
            }
        });
    </script>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


shipper_dashboard.html:

<!-- templates/shipper_dashboard.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shipper Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Sidebar -->
    <div class="fixed h-full w-64 bg-white shadow-lg">
        <div class="p-6">
            <h1 class="text-2xl font-bold text-blue-600">Shipper Panel</h1>
            <p class="text-sm text-gray-600">Food Traceability System</p>
        </div>
        <nav class="mt-8">
            <a href="#" class="flex items-center px-6 py-3 text-blue-600 bg-blue-50">
                <i class="fas fa-home mr-3"></i>Dashboard
            </a>
            <a href="{{ url_for('scan_qr') }}" class="flex items-center px-6 py-3 text-gray-600 hover:bg-gray-50">
                <i class="fas fa-qrcode mr-3"></i>Scan QR
            </a>
            <a href="{{ url_for('logout') }}" class="flex items-center px-6 py-3 text-red-600 hover:bg-red-50">
                <i class="fas fa-sign-out-alt mr-3"></i>Logout
            </a>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="ml-64 p-8">
        <!-- Header -->
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Products Ready for Shipping</h2>
            <div class="flex space-x-4">
                <div class="relative">
                    <input type="text" id="searchInput" placeholder="Search products..." 
                           class="pl-10 pr-4 py-2 rounded-lg border focus:ring-2 focus:ring-blue-500">
                    <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="grid gap-6">
            {% for product in products %}
            <div class="bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow">
                <div class="flex justify-between items-center">
                    <div>
                        <span class="text-xs font-semibold text-gray-500">Product ID</span>
                        <h3 class="text-lg font-bold text-gray-800">#{{ product.id }}</h3>
                    </div>
                    <span class="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">
                        Ready to Ship
                    </span>
                </div>
                <div class="mt-4">
                    <div class="mb-3">
                        <span class="text-sm text-gray-500">Name</span>
                        <p class="font-medium">{{ product.name }}</p>
                    </div>
                    <div class="mb-4">
                        <span class="text-sm text-gray-500">Origin</span>
                        <p class="font-medium">{{ product.origin }}</p>
                    </div>
                    <button data-id="{{ product.id }}" 
                            class="ship-btn w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors">
                        <i class="fas fa-truck-fast mr-2"></i>Start Shipping
                    </button>
                </div>
            </div>
            {% endfor %}

            {% if not products %}
            <div class="text-center bg-white rounded-lg shadow-sm p-12">
                <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-box-open text-gray-400 text-2xl"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900">No Products Available</h3>
                <p class="text-gray-500 mt-2">New products will appear here when ready for shipping</p>
            </div>
            {% endif %}
        </div>
    </div>

    <script>
        document.querySelectorAll('.ship-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const productId = this.dataset.id;
                Swal.fire({
                    title: 'Start Shipping?',
                    text: 'Update this product to shipping status?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/ship_product/${productId}`, {
                            method: 'POST'
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire('Success!', 'Product is now in transit', 'success')
                                    .then(() => location.reload());
                            } else {
                                throw new Error(data.error);
                            }
                        })
                        .catch(error => {
                            Swal.fire('Error!', error.message, 'error');
                        });
                    }
                });
            });
        });

        // Search functionality
        document.getElementById('searchInput').addEventListener('keyup', function() {
            const searchText = this.value.toLowerCase();
            document.querySelectorAll('.grid > div').forEach(product => {
                if (!product.classList.contains('text-center')) {
                    const productText = product.textContent.toLowerCase();
                    product.style.display = productText.includes(searchText) ? 'block' : 'none';
                }
            });
        });
    </script>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Deliverer_dashboard.html:

<!-- templates/deliverer_dashboard.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deliverer Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Sidebar -->
    <div class="fixed h-full w-64 bg-white shadow-lg">
        <div class="p-6">
            <h1 class="text-2xl font-bold text-green-600">Deliverer Panel</h1>
            <p class="text-sm text-gray-600">Food Traceability System</p>
        </div>
        <nav class="mt-8">
            <a href="#" class="flex items-center px-6 py-3 text-green-600 bg-green-50">
                <i class="fas fa-home mr-3"></i>Dashboard
            </a>
            <a href="{{ url_for('scan_qr') }}" class="flex items-center px-6 py-3 text-gray-600 hover:bg-gray-50">
                <i class="fas fa-qrcode mr-3"></i>Scan QR
            </a>
            <a href="{{ url_for('logout') }}" class="flex items-center px-6 py-3 text-red-600 hover:bg-red-50">
                <i class="fas fa-sign-out-alt mr-3"></i>Logout
            </a>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="ml-64 p-8">
        <!-- Header -->
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Products In Transit</h2>
            <div class="flex space-x-4">
                <div class="relative">
                    <input type="text" id="searchInput" placeholder="Search products..." 
                           class="pl-10 pr-4 py-2 rounded-lg border focus:ring-2 focus:ring-green-500">
                    <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="grid gap-6">
            {% for product in products %}
            <div class="bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow">
                <div class="flex justify-between items-center">
                    <div>
                        <span class="text-xs font-semibold text-gray-500">Product ID</span>
                        <h3 class="text-lg font-bold text-gray-800">#{{ product.id }}</h3>
                    </div>
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                        In Transit
                    </span>
                </div>
                <div class="mt-4">
                    <div class="mb-3">
                        <span class="text-sm text-gray-500">Name</span>
                        <p class="font-medium">{{ product.name }}</p>
                    </div>
                    <div class="mb-4">
                        <span class="text-sm text-gray-500">Origin</span>
                        <p class="font-medium">{{ product.origin }}</p>
                    </div>
                    <button data-id="{{ product.id }}" 
                            class="deliver-btn w-full bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600 transition-colors">
                        <i class="fas fa-check mr-2"></i>Mark as Delivered
                    </button>
                </div>
            </div>
            {% endfor %}

            {% if not products %}
            <div class="text-center bg-white rounded-lg shadow-sm p-12">
                <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-truck text-gray-400 text-2xl"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900">No Products In Transit</h3>
                <p class="text-gray-500 mt-2">Products in shipping will appear here</p>
            </div>
            {% endif %}
        </div>
    </div>

    <script>
        document.querySelectorAll('.deliver-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const productId = this.dataset.id;
                Swal.fire({
                    title: 'Mark as Delivered?',
                    text: 'Confirm product delivery?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/deliver_product/${productId}`, {
                            method: 'POST'
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire('Success!', 'Product marked as delivered', 'success')
                                    .then(() => location.reload());
                            } else {
                                throw new Error(data.error);
                            }
                        })
                        .catch(error => {
                            Swal.fire('Error!', error.message, 'error');
                        });
                    }
                });
            });
        });

        // Search functionality
        document.getElementById('searchInput').addEventListener('keyup', function() {
            const searchText = this.value.toLowerCase();
            document.querySelectorAll('.grid > div').forEach(product => {
                if (!product.classList.contains('text-center')) {
                    const productText = product.textContent.toLowerCase();
                    product.style.display = productText.includes(searchText) ? 'block' : 'none';
                }
            });
        });
    </script>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

scan_qr.html:

<!-- templates/scan_qr.html -->
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Scan QR Code</title>
   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
   <script src="https://unpkg.com/html5-qrcode"></script>
   <style>
       .hidden {
           display: none;
       }
   </style>
</head>
<body class="bg-gray-100 min-h-screen">
   <!-- Navigation -->
   <nav class="bg-white shadow-lg mb-8">
       <div class="max-w-6xl mx-auto px-4">
           <div class="flex justify-between items-center h-16">
               <span class="text-2xl text-blue-600 font-semibold">
                   <i class="fas fa-qrcode mr-2"></i>QR Scanner
               </span>
               <a href="javascript:history.back()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg">
                   <i class="fas fa-arrow-left mr-2"></i>Back
               </a>
           </div>
       </div>
   </nav>

   <div class="max-w-4xl mx-auto px-4">
       <div class="bg-white rounded-lg shadow-lg p-6">
           <h1 class="text-2xl font-bold mb-8 text-center">Scan Product QR Code</h1>

           <!-- Scanner Container -->
           <div class="mb-8">
               <div id="reader" class="mx-auto" style="max-width: 500px;"></div>
               <div id="loading" class="text-center mt-4 hidden">
                   <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
               </div>
           </div>

           <!-- Error Message -->
           <div id="error" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
               <p id="errorMessage"></p>
           </div>

           <!-- Product Details -->
           <div id="productDetails" class="hidden">
               <h2 class="text-xl font-bold mb-4 text-gray-800">Product Information</h2>
               <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                   <div class="bg-gray-50 p-4 rounded-lg">
                       <p class="text-sm text-gray-500">Product Name</p>
                       <p id="productName" class="font-medium text-gray-900"></p>
                   </div>
                   <div class="bg-gray-50 p-4 rounded-lg">
                       <p class="text-sm text-gray-500">Origin</p>
                       <p id="productOrigin" class="font-medium text-gray-900"></p>
                   </div>
                   <div class="bg-gray-50 p-4 rounded-lg">
                       <p class="text-sm text-gray-500">Status</p>
                       <p id="productStatus" class="font-medium text-gray-900"></p>
                   </div>
                   <div class="bg-gray-50 p-4 rounded-lg">
                       <p class="text-sm text-gray-500">Timestamp</p>
                       <p id="productTimestamp" class="font-medium text-gray-900"></p>
                   </div>
               </div>
               <button onclick="restartScanner()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg w-full">
                   <i class="fas fa-redo mr-2"></i>Scan Another Product
               </button>
           </div>
       </div>
   </div>

   <script>
       let html5QrCode = null;

       function initializeScanner() {
           html5QrCode = new Html5Qrcode("reader");
           const config = { fps: 10, qrbox: { width: 250, height: 250 } };

           html5QrCode.start(
               { facingMode: "environment" },
               config,
               onScanSuccess,
               onScanFailure
           ).catch(err => {
               showError("Error accessing camera: " + err.message);
           });
       }

       function onScanSuccess(qrCodeMessage) {
           document.getElementById('loading').classList.remove('hidden');
           
           // Stop scanning
           if (html5QrCode) {
               html5QrCode.stop();
           }

           // Verify product
           fetch(`/verify_product/${encodeURIComponent(qrCodeMessage)}`)
               .then(response => response.json())
               .then(data => {
                   document.getElementById('loading').classList.add('hidden');
                   if (data.success) {
                       showProductDetails(data.product);
                   } else {
                       throw new Error(data.error || 'Failed to verify product');
                   }
               })
               .catch(error => {
                   document.getElementById('loading').classList.add('hidden');
                   showError(error.message);
               });
       }

       function onScanFailure(error) {
           // Don't show anything for regular scanning failures
           console.log(error);
       }

       function showProductDetails(product) {
           document.getElementById('productName').textContent = product.name;
           document.getElementById('productOrigin').textContent = product.origin;
           document.getElementById('productStatus').textContent = ['Produced', 'In Transit', 'Delivered'][product.status];
           document.getElementById('productTimestamp').textContent = new Date(product.timestamp * 1000).toLocaleString();
           
           document.getElementById('productDetails').classList.remove('hidden');
           document.getElementById('error').classList.add('hidden');
           document.getElementById('reader').style.display = 'none';
       }

       function showError(message) {
           document.getElementById('errorMessage').textContent = message;
           document.getElementById('error').classList.remove('hidden');
           document.getElementById('productDetails').classList.add('hidden');
       }

       function restartScanner() {
           document.getElementById('reader').style.display = 'block';
           document.getElementById('productDetails').classList.add('hidden');
           document.getElementById('error').classList.add('hidden');
           initializeScanner();
       }

       // Initialize scanner when page loads
       initializeScanner();
   </script>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

IN SHORT:

Let me break down everything we've done from start to finish:

Environment Setup:

Installed Visual Studio Code
Installed Node.js
Installed Git
Installed Truffle
Installed Ganache (local blockchain)
Installed MetaMask (blockchain wallet)


Project Setup:

Created project directory
Created SupplyChain.sol (smart contract)
Created truffle-config.js (configuration file)
Set up Ganache network (running on localhost:7545)


Smart Contract Development:

Wrote SupplyChain contract with:

Product struct (id, name, origin, timestamp, producer, status)
Status enum (Produced, InTransit, Delivered)
Functions: createProduct, shipProduct, deliverProduct
Mapping to store products




Network Configuration:

Connected MetaMask to Ganache
Added local network (localhost:7545)
Imported Ganache account into MetaMask


Contract Deployment:

Compiled the contract using Truffle
Deployed to local Ganache blockchain
Verified deployment success

INSTALL:

pip install flask
pip install web3
pip install qrcode
pip install Pillow


my project structure:

supply-chain-app/
├── app.py (Flask application)
├── contract_abi.json (Contract ABI)
├── templates/
│   ├── login.html
│   ├── producer_dashboard.html
│   ├── shipper_dashboard.html
│   ├── deliverer_dashboard.html
│   └── scan_qr.html
└── Supply_Chain.sol (Smart contract)


Supply_Chain.sol (Smart Contract):


Handles product data on blockchain
Manages roles (producer, shipper, deliverer)
Tracks product status (produced → shipped → delivered)
Core functions: createProduct, shipProduct, deliverProduct
Stores product details & QR codes


app.py (Flask Backend):


Web server setup
Contract interaction using Web3.py
User authentication
Routes for different pages
QR code generation
API endpoints for product operations


Templates (Frontend):

login.html - User login interface
producer_dashboard.html - Create products
shipper_dashboard.html - Update shipping status
deliverer_dashboard.html - Mark deliveries
scan_qr.html - Scan & verify products


Process Flow:


Contract Deployment → User Login → Role-based Access → Product Operations

 explain the step-by-step setup process:

Set up Ganache:


Install and open Ganache
Create new workspace
Note down:

RPC Server URL (usually http://127.0.0.1:7545)
First account address (contract owner)
Network ID (usually 1337)




Set up MetaMask:


Install MetaMask browser extension
Configure new network:

Network Name: Ganache
RPC URL: http://127.0.0.1:7545
Chain ID: 1337


Import Ganache account using private key


Deploy Contract in Remix:


Open Remix IDE
Create Supply_Chain.sol
Compile contract
Connect to Ganache network in MetaMask
Deploy contract
Save the contract address and ABI

Then Flask and HTML CSS setup.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

































